% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simple.R
\name{rx_trigger}
\alias{rx_fire_trigger}
\alias{rx_trigger}
\title{Reactive trigger}
\usage{
rx_trigger()

rx_fire_trigger(rxtrig)
}
\arguments{
\item{rxtrig}{The trigger to fire.}
}
\value{
\code{rx_trigger} returns a function-like object that you can call to
  take a dependency on the trigger.
}
\description{
At times it can be useful to have an explicit mechanism to cause a reactive
expression to invalidate. Create a reactive trigger outside of the reactive
expression using \code{rx_trigger}, then have the reactive expression call
the reactive trigger like a function--this will take a reactive dependency on
the trigger. When you want to cause the reactive expression to invalidate,
call \code{rx_fire_trigger(trigger)}.
}
\details{
\code{rx_trigger} is the constructor for the reactive trigger. The reactive
trigger object that it produces should be called like a function from
whatever reactive context wants to be triggered by it.

To fire a reactive trigger, pass it to the \code{rx_fire_trigger} function.
}
\examples{
trig <- rx_trigger()

now <- rx_exec({
  trig()
  print(Sys.time())
})

rx_exec({
  shiny::invalidateLater(1000, NULL)
  rx_fire_trigger(trig)
})

}

