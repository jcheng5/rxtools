% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simple.R
\name{rx_runloop}
\alias{rx_runloop}
\alias{rx_stoploop}
\title{Run reactive event loop}
\usage{
rx_runloop(..., before_tick = NULL, after_tick = NULL)

rx_stoploop()
}
\arguments{
\item{...}{Currently ignored. (Used to force other arguments to be passed by
name, not by position.)}

\item{before_tick}{A no-argument callback function that will be called before
work is done for each iteration.}

\item{after_tick}{A no-argument callback function that will be called after
work is done for each iteration.}
}
\description{
Setting up reactive graphs does nothing until something actually causes
reactive events to be processed. This is handled for you when writing Shiny
apps, but it might also be useful to run reactives outside of Shiny, for
testing and experimentation if nothing else. This function runs an event loop
for reactivity and timer actions. From an interactive console, interrupt it
using \code{Escape} or \code{Ctrl+C} (or whatever the usual interrupt gesture
is in your R environment). You can also stop the loop programmatically by
calling \code{rx_stoploop}.
}
\examples{

counter <- rx_value(0)

rx_exec({
  print(counter())
  if (counter() == 10)
    rx_stoploop()
})

rx_exec({
  invalidateLater(100)
  isolate({
    counter(counter() + 1)
  })
})

rx_runloop()

}

